fun parseMap(input: String): Array<IntArray> {
    // Podziel input na linie
    val lines = input.trim().split("\n")

    // Przetwórz każdą linię na IntArray
    return lines.map { line ->
        line.map { char ->
            when (char) {
                'S' -> 5
                'E' -> 5
                '5' -> 5

                ' ' -> 0
                '0' -> 0

                '█' -> 1
                '1' -> 1
                else -> throw IllegalArgumentException("Nieprawidłowy znak: $char")
            }
        }.toIntArray()
    }.toTypedArray()
}

fun main() {
    val input = """
00111111111111111111111111111
00100000100000100000000000001
10101011101010101110111011111
10101000101010001010100010001
10111010101011111011111011101
10100010001000100010100000001
10111110111110111010111111101
10000010100000000010100000101
10101010111010111110101111111
10101000001010001000000010001
10111111111011101110101111101
10001000000000100010101010001
11101111101110101011101011101
10001010100010101000001010101
10101010111111111111111010101
10101010000000100010100000001
10111011111110111010101011101
10000010000000000010001010001
10111111111010101111111110101
10001010101010101010000010101
10101010101110111010101011101
10100010100010001010101010001
10111110101110111011111011101
10000000001000100000100000001
10111111101110111011101110101
10100000101010101000000010101
11111110101010101110111010111
1000000000000000000000101000
1111111111111111111111111110
    """.trimIndent()

    val map = parseMap(input)

    // Wypisz wynik w formacie intArrayOf
    println("var grid: Array<IntArray> = arrayOf(")
    map.forEachIndexed { index, row ->
        print("    intArrayOf(${row.joinToString(",")})")
        if (index < map.size - 1) print(",")
        println()
    }
    println(")")
}